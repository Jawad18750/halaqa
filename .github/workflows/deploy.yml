name: Deploy Halaqa
on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-production
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---------- Frontend (Vite) ----------
      - name: Install (frontend)
        working-directory: quran-tester-app
        run: npm install

      - name: Build (frontend)
        working-directory: quran-tester-app
        env:
          VITE_API_URL: https://api.halaqa.abdeljawad.com
        run: npm run build

      - name: Prepare frontend artifact
        run: |
          mkdir -p artifact_frontend
          cp -r quran-tester-app/dist/* artifact_frontend/
          # SPA fallback for CyberPanel/OpenLiteSpeed
          cat > artifact_frontend/.htaccess << 'EOF'
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} -f [OR]
          RewriteCond %{REQUEST_FILENAME} -d
          RewriteRule ^ - [L]
          RewriteRule ^ index.html [L]
          EOF

      # ---------- Backend ----------
      - name: Prepare backend artifact
        run: |
          mkdir -p artifact_server
          rsync -a server/ artifact_server/ --exclude node_modules --exclude .env

      # ---------- SSH ----------
      - name: Setup SSH
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$VPS_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts

      # ---------- Upload + Activate ----------
      - name: Upload and activate (frontend + backend)
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_FRONT_PATH: ${{ secrets.VPS_FRONT_PATH }}
          VPS_API_PATH: ${{ secrets.VPS_API_PATH }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
        run: |
          set -e
          TS="$(date +%Y%m%d%H%M%S)"
          FRONT_RELEASE="${VPS_FRONT_PATH}_releases/${TS}"
          API_RELEASE="${VPS_API_PATH}_releases/${TS}"

          # Create release dirs
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "mkdir -p \"$FRONT_RELEASE\" \"$API_RELEASE\""

          # Upload frontend
          rsync -az --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" artifact_frontend/ "$VPS_USER@$VPS_HOST:$FRONT_RELEASE/"
          # Symlink swap for frontend and ensure traversal perms for OLS
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "
            ln -sfn \"$FRONT_RELEASE\" \"${VPS_FRONT_PATH}_current\" && \
            chmod o+x /home /home/deploy || true && \
            find \"$FRONT_RELEASE\" -maxdepth 3 -type d -exec chmod o+rx {} \\\\; || true
          "

          # Upload backend
          rsync -az --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" artifact_server/ "$VPS_USER@$VPS_HOST:$API_RELEASE/"

          # Backend: deps, .env, data presence, migrate, PM2
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" bash -lc "
            set -e
            cd \"$API_RELEASE\"
            npm install --omit=dev
            cat > .env << EOF
            NODE_ENV=$NODE_ENV
            PORT=4000
            DATABASE_URL=$DATABASE_URL
            JWT_SECRET=$JWT_SECRET
            EOF
            # Ensure canonical thumun data is present (safe even if loader finds another path)
            mkdir -p src/data || true
            if [ -f src/data/quran-thumun-data.json ]; then
              echo 'Thumun data present in src/data.'
            elif [ -f \"${VPS_FRONT_PATH}_current/quran-thumun-data.json\" ]; then
              cp -f \"${VPS_FRONT_PATH}_current/quran-thumun-data.json\" src/data/quran-thumun-data.json
              echo 'Copied thumun data from frontend current.'
            else
              echo 'No canonical thumun data copied; relying on THUMUN_DATA_PATH or bundled.'
            fi

            # Run DB migrations (includes relax attempt_day when present)
            npm run migrate

            # Swap to current symlink and start PM2 from the current path
            ln -sfn \"$API_RELEASE\" \"${VPS_API_PATH}_current\"
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2
            pm2 update || true
            (pm2 start \"${VPS_API_PATH}_current/src/index.js\" --name halaqa-api --update-env --cwd \"${VPS_API_PATH}_current\" || pm2 restart halaqa-api --update-env)
            pm2 save
            # Keep last 5 releases
            cd "$(dirname \"$API_RELEASE\")"
            ls -1 | sort | head -n -5 | xargs -r -I {} rm -rf {}
          "

      # ---------- Post-deploy smoke tests ----------
      - name: Health check API
        run: |
          curl -sS https://api.halaqa.abdeljawad.com/health

      - name: Preflight (OPTIONS) /sessions CORS check
        run: |
          set -e
          RESP=$(curl -s -i -X OPTIONS https://api.halaqa.abdeljawad.com/sessions \
            -H 'Origin: https://halaqa.abdeljawad.com' \
            -H 'Access-Control-Request-Method: POST' \
            -H 'Access-Control-Request-Headers: content-type,authorization')
          echo "$RESP"
          # Accept either explicit origin echo or wildcard managed by proxy
          echo "$RESP" | grep -iq 'access-control-allow-origin: \*\|access-control-allow-origin: https://halaqa.abdeljawad.com'
          echo "$RESP" | grep -iq 'HTTP/1.1 200\|HTTP/2 200\|HTTP/1.1 204\|HTTP/2 204'